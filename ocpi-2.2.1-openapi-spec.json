{
  "openapi": "3.0.1",
  "info": {
    "title": "Open Charge Point Interface (OCPI) 2.2.1",
    "version": "2.2.1",
    "description": "The Open Charge Point Interface (OCPI) enables a scalable, automated EV roaming setup between Charge Point Operators and eMobility Service Providers. It supports authorization, charge point information exchange (including live status updates and\ntransaction events), charge detail record exchange, remote charge point commands and the exchange of smart-charging related\ninformation between parties.\n\nThis specification document is originally based on https://bitbucket.org/shareandcharge/ocn-node/src/master/examples/openapi-spec.json  [Apache License, Version 2.0]. The OCPI specification itself is licensed as Creative Commons Attribution-NoDerivatives 4.0 International https://creativecommons.org/licenses/by-nd/4.0/legalcode\n\nUpdated to 2.2.1 by Neil :)",
    "license": {
      "url": "https://creativecommons.org/licenses/by-nd/4.0/legalcode",
      "name": "Creative Commons Attribution-NoDerivatives 4.0 International"
    }
  },
  "servers": [
    {
      "url": "http://localhost:4200/api",
      "description": "Proxy API url"
    },
    {
      "url": "https://test.everty.network",
      "description": "Everty test network"
    },
    {
      "url": "http://localhost:8080",
      "description": "Generated server url"
    }
  ],
  "paths": {
    "/ocpi/cpo/versions": {
      "get": {
        "tags": [
          "versions-controller"
        ],
        "operationId": "getVersions",
        "summary": "Lists all versions available",
        "description": "Implemented by: ALL\n\nThis endpoint lists all the available OCPI versions and the corresponding URLs to where version specific details such as the supported endpoints can be found.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseListVersion"
                }
              }
            }
          }
        }
      }
    },
    "/ocpi/cpo/{versionNumber}": {
      "get": {
        "operationId": "getVersion",
        "summary": "Gets more details of a version",
        "description": "Implemented by: ALL\n\nVia the version details, the parties can exchange which modules are implemented for a specific version of OCPI, which interface role is implemented, and what the endpoint URL is for this interface.\n\nParties that are both CPO and eMSP (or a Hub) can implement one version endpoint that covers both roles. With the information that is available in the version details, parties don’t need to implement a separate endpoint per role (CPO or eMSP) anymore. In practice this means that when a company is both a CPO and an eMSP and it connects to another party that implements both interfaces, only one OCPI connection is needed.",
        "tags": [
          "versions-controller"
        ],
        "parameters": [
          {
            "name": "versionNumber",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/VersionNumber"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseVersionDetail"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "status_code": 0,
                      "status_message": "string",
                      "data": {
                        "version": "string",
                        "endpoints": [
                          {
                            "identifier": "string",
                            "role": "SENDER",
                            "url": "string"
                          }
                        ]
                      },
                      "timestamp": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ocpi/2.2.1/credentials": {
      "get": {
        "tags": [
          "credentials-controller"
        ],
        "operationId": "getCredentials",
        "summary": "Retrieves the credentials object to access the server's platform",
        "description": "Implemented by: ALL\n\nRetrieves the credentials object to access the server’s platform. The request body is empty, the response contains the credentials object to access the server’s platform. This credentials object also contains extra information about the server such as its business details.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseCredentials"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "credentials-controller"
        ],
        "operationId": "postCredentials",
        "summary": "Provides the server with a credentials object to access the client's system (i.e. register).",
        "description": "Implemented by: ALL\n\nProvides the server with credentials to access the client’s system. This credentials object also contains extra information about the client such as its business details.\n\nA `POST` initiates the registration process for this endpoint's version. The server must also fetch the client's endpoints for this version. \n\nIf successful, the server must generate a new token and respond with the client's new credentials to access the server's system. The credentials object in the response also contains extra information about the server such as its business details.\n\nImplemented by: All OCPI ",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Credentials"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseCredentials"
                }
              }
            }
          },
          "405": {
            "description": "method not allowed, client already registered"
          }
        }
      },
      "put": {
        "tags": [
          "credentials-controller"
        ],
        "operationId": "putCredentials",
        "summary": "Provides the server with updated credentials to access the client’s system",
        "description": "Implemented by: ALL\n\nProvides the server with updated credentials to access the client’s system. This credentials object also contains extra information about the client such as its business details.\n\nA `PUT` will switch to the version that contains this credentials endpoint if it’s different from the current version. The server must fetch the client’s endpoints again, even if the version has not changed.\n\nIf successful, the server must generate a new credentials token for the client and respond with the client’s updated credentials to access the server’s system. The credentials object in the response also contains extra information about the server such as its business details.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Credentials"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseCredentials"
                }
              }
            }
          },
          "405": {
            "description": "method not allowed, client has not been registered yet"
          }
        }
      },
      "delete": {
        "tags": [
          "credentials-controller"
        ],
        "operationId": "deleteCredentials",
        "summary": "Informs the server that its credentials to access the client’s system are now invalid and can no longer be used",
        "description": "Implemented by: ALL\n\nInforms the server that its credentials to access the client’s system are now invalid and can no longer be used. Both parties must end any automated communication. This is the unregistration process.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponse"
                }
              }
            }
          },
          "405": {
            "description": "method not allowed, client has not been registered yet"
          }
        }
      }
    },
    "/ocpi/sender/2.2.1/locations": {
      "get": {
        "tags": [
          "locations-controller"
        ],
        "operationId": "getLocationListFromDataOwner",
        "summary": "Gets all a list of locations",
        "description": "Implemented by: CPO\n\nDepending on the URL Segments provided, the `GET` request can either be used to retrieve information about a list of available Locations (with EVSEs and Connectors) at a CPO (`GET` List) or it can be used to retrieve information about one specific Location, `GET` Fetch a list of Locations, last updated between the {date_from} and {date_to} (paginated), or get a specific Location, EVSE or Connector. EVSE or Connector (`GET` Object).",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseLocationList"
                }
              }
            }
          }
        }
      }
    },
    "/ocpi/sender/2.2.1/locations/{locationID}": {
      "get": {
        "tags": [
          "locations-controller"
        ],
        "operationId": "getLocationObjectFromDataOwner",
        "summary": "Gets the specific Location object with locationID",
        "description": "Implemented by: CPO\n\nGiven a locationID, it will return the Location object with the same locationID",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseLocation"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/ocpi/sender/2.2.1/locations/{locationID}/{evseUID}": {
      "get": {
        "tags": [
          "locations-controller"
        ],
        "operationId": "getEvseObjectFromDataOwner",
        "summary": "Gets the specific Evse object at a location",
        "description": "Implemented by: CPO\n\nGiven a locationID and evseUID, it will return the Evse object with the same uid at that specific location",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evseUID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseEvse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/ocpi/sender/2.2.1/locations/{locationID}/{evseUID}/{connectorID}": {
      "get": {
        "tags": [
          "locations-controller"
        ],
        "operationId": "getConnectorObjectFromDataOwner",
        "summary": "Gets the specific Connector object from an EVSE at a location",
        "description": "Implemented by: CPO\n\nGiven a locationID, evseUID and connectorID it will return the Connector object with the same connectorID",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evseUID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectorID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseConnector"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/ocpi/receiver/2.2.1/locations/{countryCode}/{partyID}/{locationID}": {
      "get": {
        "tags": [
          "locations-controller"
        ],
        "operationId": "getClientOwnedLocation",
        "summary": "Get the Location object stored in the eMSP",
        "description": "Implemented by: eMSP, NSP\n\nLocations are Client Owned Objects, so the end-points need to contain the required extra fields: {party_id} and {country_code}.\n\nIf the CPO wants to check the status of a Location, EVSE or Connector object in the eMSP system, it might `GET` the object from the eMSP system for validation purposes. The CPO is the owner of the objects, so it would be illogical if the eMSP system had a different status or was missing an object. If a discrepancy is found, the CPO might push an update to the eMSP via a `PUT` or `PATCH` call.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseLocation"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "put": {
        "tags": [
          "locations-controller"
        ],
        "operationId": "putClientOwnedLocation",
        "summary": "The CPO pushes the available Location object to the eMSP.",
        "description": "Implemented by: eMSP, NSP\n\nThe CPO pushes available Location, EVSE or Connector objects to the eMSP. `PUT` can be used to send new Location objects to the eMSP but also to replace existing Locations.\n\nWhen the `PUT` only contains a Connector Object, the Receiver SHALL also set the new last_updated value on the parent EVSE and Location Objects.\n\nWhen the `PUT` only contains a EVSE Object, the Receiver SHALL also set the new last_updated value on the parent Location Object.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Location"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseUnit"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "locations-controller"
        ],
        "operationId": "patchClientOwnedLocation",
        "summary": "Updates the existing fields of a location stored in the eMSP",
        "description": "Implemented by: eMSP, NSP\n\nSame as the `PUT` method, but only the fields/objects that have to be updated have to be present. Other fields/objects that are not specified as part of the request are considered unchanged. Therefore, this method is not suitable to remove information shared earlier.\n\nAny request to the `PATCH` method SHALL contain the last_updated field.\n\nWhen the `PATCH` is on a Connector Object, the Receiver SHALL also set the new last_updated value on the parent EVSE and Location Objects.\n\nWhen the `PATCH` is on a EVSE Object, the Receiver SHALL also set the new last_updated value on the parent Location Object.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseUnit"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/ocpi/receiver/2.2.1/locations/{countryCode}/{partyID}/{locationID}/{evseUID}": {
      "get": {
        "tags": [
          "locations-controller"
        ],
        "operationId": "getClientOwnedEvse",
        "summary": "Get the Evse object stored in the eMSP",
        "description": "Implemented by: eMSP, NSP\n\nLocations are Client Owned Objects, so the end-points need to contain the required extra fields: {party_id} and {country_code}.\n\nIf the CPO wants to check the status of a Location, EVSE or Connector object in the eMSP system, it might `GET` the object from the eMSP system for validation purposes. The CPO is the owner of the objects, so it would be illogical if the eMSP system had a different status or was missing an object. If a discrepancy is found, the CPO might push an update to the eMSP via a `PUT` or `PATCH` call.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evseUID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseEvse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "put": {
        "tags": [
          "locations-controller"
        ],
        "operationId": "putClientOwnedEvse",
        "summary": "The CPO pushes the available Evse object to the eMSP.",
        "description": "Implemented by: eMSP, NSP\n\nThe CPO pushes available Location, EVSE or Connector objects to the eMSP. `PUT` can be used to send new Location objects to the eMSP but also to replace existing Locations.\n\nWhen the `PUT` only contains a Connector Object, the Receiver SHALL also set the new last_updated value on the parent EVSE and Location Objects.\n\nWhen the `PUT` only contains a EVSE Object, the Receiver SHALL also set the new last_updated value on the parent Location Object.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evseUID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Evse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseUnit"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "patch": {
        "tags": [
          "locations-controller"
        ],
        "operationId": "patchClientOwnedEvse",
        "summary": "Updates the existing fields of an EVSE stored in the eMSP",
        "description": "Implemented by: eMSP, NSP\n\nSame as the `PUT` method, but only the fields/objects that have to be updated have to be present. Other fields/objects that are not specified as part of the request are considered unchanged. Therefore, this method is not suitable to remove information shared earlier.\n\nAny request to the `PATCH` method SHALL contain the last_updated field.\n\nWhen the `PATCH` is on a Connector Object, the Receiver SHALL also set the new last_updated value on the parent EVSE and Location Objects.\n\nWhen the `PATCH` is on a EVSE Object, the Receiver SHALL also set the new last_updated value on the parent Location Object.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evseUID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseUnit"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/ocpi/receiver/2.2.1/locations/{countryCode}/{partyID}/{locationID}/{evseUID}/{connectorID}": {
      "get": {
        "tags": [
          "locations-controller"
        ],
        "operationId": "getClientOwnedConnector",
        "summary": "Get the Connector object stored in the eMSP",
        "description": "Implemented by: eMSP, NSP\n\nLocations are Client Owned Objects, so the end-points need to contain the required extra fields: {party_id} and {country_code}.\n\nIf the CPO wants to check the status of a Location, EVSE or Connector object in the eMSP system, it might `GET` the object from the eMSP system for validation purposes. The CPO is the owner of the objects, so it would be illogical if the eMSP system had a different status or was missing an object. If a discrepancy is found, the CPO might push an update to the eMSP via a `PUT` or `PATCH` call.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evseUID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectorID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseConnector"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "put": {
        "tags": [
          "locations-controller"
        ],
        "operationId": "putClientOwnedConnector",
        "summary": "The CPO pushes the available Connector object to the eMSP.",
        "description": "Implemented by: eMSP, NSP\n\nThe CPO pushes available Location, EVSE or Connector objects to the eMSP. `PUT` can be used to send new Location objects to the eMSP but also to replace existing Locations.\n\nWhen the `PUT` only contains a Connector Object, the Receiver SHALL also set the new last_updated value on the parent EVSE and Location Objects.\n\nWhen the `PUT` only contains a EVSE Object, the Receiver SHALL also set the new last_updated value on the parent Location Object.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evseUID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectorID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Connector"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseUnit"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "patch": {
        "tags": [
          "locations-controller"
        ],
        "operationId": "patchClientOwnedConnector",
        "summary": "Updates the existing fields of a connector stored in the eMSP",
        "description": "Implemented by: eMSP, NSP\n\nSame as the `PUT` method, but only the fields/objects that have to be updated have to be present. Other fields/objects that are not specified as part of the request are considered unchanged. Therefore, this method is not suitable to remove information shared earlier.\n\nAny request to the `PATCH` method SHALL contain the last_updated field.\n\nWhen the `PATCH` is on a Connector Object, the Receiver SHALL also set the new last_updated value on the parent EVSE and Location Objects.\n\nWhen the `PATCH` is on a EVSE Object, the Receiver SHALL also set the new last_updated value on the parent Location Object.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evseUID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectorID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseUnit"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/ocpi/sender/2.2.1/sessions": {
      "get": {
        "tags": [
          "sessions-controller"
        ],
        "operationId": "getSessionsFromDataOwner",
        "summary": "Fetch all sessions from a CPO system",
        "description": "Implemented by: CPO\n\nFetch Sessions from a CPO system.\n\nEndpoint structure definition:\n\n{sessions_endpoint_url}?[date_from={date_from}]&[date_to={date_to}]&[offset={offset}]&[limit={limit}]",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseSessionList"
                }
              }
            }
          }
        }
      }
    },
    "/ocpi/sender/2.2.1/sessions/{sessionID}/charging_preferences": {
      "put": {
        "tags": [
          "sessions-controller"
        ],
        "operationId": "putChargingPreferences",
        "summary": "Set/update the driver’s Charging Preferences for this charging session",
        "description": "Implemented by: eMSP,SCSP\n\nSet/update the driver’s Charging Preferences for this charging session.\n\nNOTE: The /charging_preferences URL siffix is required when setting Charging Preferences",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargingPreferences"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseChargingPreferencesResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/ocpi/receiver/2.2.1/sessions/{countryCode}/{partyID}/{sessionID}": {
      "get": {
        "tags": [
          "sessions-controller"
        ],
        "operationId": "getClientOwnedSession",
        "summary": "Get the Session object stored in the eMSP",
        "description": "Implemented by: eMSP, SCSP\n\nThe CPO system might request the current version of a Session object from the eMSP’s system to, for example, validate the state, or because the CPO has received an error during a `PATCH` operation.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseSession"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "put": {
        "tags": [
          "sessions-controller"
        ],
        "operationId": "putClientOwnedSession",
        "summary": "Inform the eMSP's system about a new/updated Session object in the CPO's system",
        "description": "Implemented by: eMSP, SCSP\n\nInform the eMSP’s system about a new/updated Session object in the CPO’s system.\n\nWhen a `PUT` request is received for an existing Session object (the object is `PUT` to the same URL), The newly received Session object SHALL replace the existing object.\n\nAny charging_periods from the existing object SHALL be replaced by the charging_periods from the newly received Session object. If the new Session object does not contain charging_periods (field is omitted or contains any empty list), the charging_periods of the existing object SHALL be removed (replaced by the new empty list).",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Session"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseUnit"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "sessions-controller"
        ],
        "operationId": "patchClientOwnedSession",
        "summary": "Updates the existing fields of a Session in the eMSP's system",
        "description": "Implemented by: eMSP, SCSP\n\nSame as the `PUT` method, but only the fields/objects that need to be updated have to be present. Fields/objects which are not specified are considered unchanged.\n\nAny request to the `PATCH` method SHALL contain the last_updated field.\n\nThe `PATCH` method of the Session Receiver interface works on the entire Session object only. It is not allowed to use extra URLsegments to try to `PATCH` fields of inner objects of the Session object directly.\n\nWhen a `PATCH` request contains the charging_periods field (inside a Session object), this SHALL be processed as a request to add all the ChargingPeriod objects to the existing Session object. If the request charging_periods list is omitted (or contains an empty list), no changes SHALL be made to the existing list of charging_periods.\n\nIf existing ChargingPeriod objects in a Session need to be replaced or removed, the Sender SHALL use the `PUT` method to replace the entire Session object (including all the charging_periods).",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseUnit"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/ocpi/sender/2.2.1/cdrs": {
      "get": {
        "tags": [
          "cdrs-controller"
        ],
        "operationId": "getCdrsFromDataOwner",
        "summary": "Fetch CDRs from the CPO interface",
        "description": "Implemented by: CPO\n\nFetch CDRs last updated (which in the current version of OCPI can only be the creation Date/Time) between the {date_from} and {date_to} (paginated).",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseCDRList"
                }
              }
            }
          }
        }
      }
    },
    "/ocpi/receiver/2.2.1/cdrs/{cdrID}": {
      "get": {
        "tags": [
          "cdrs-controller"
        ],
        "operationId": "getClientOwnedCdr",
        "summary": "Retrieve an existing CDR",
        "description": "Implemented by: eMSP\n\nFetch CDRs from the receivers system.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdrID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseCDR"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/ocpi/receiver/2.2.1/cdrs": {
      "post": {
        "tags": [
          "cdrs-controller"
        ],
        "operationId": "postClientOwnedCdr",
        "summary": "Send a new CDR",
        "description": "Implemented by: eMSP\n\nCreates a new CDR.\n\nThe `POST` method should contain the full and final CDR object.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CDR"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseUnit"
                }
              }
            }
          }
        }
      }
    },
    "/ocpi/sender/2.2.1/tariffs": {
      "get": {
        "tags": [
          "tariffs-controller"
        ],
        "operationId": "getTariffsFromDataOwner",
        "summary": "Returns Tariff objects from the CPO, last updated between the {date_from} and {date_to} (paginated)",
        "description": "Implemented by: CPO\n\nFetch information about all Tariffs.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseTariffList"
                }
              }
            }
          }
        }
      }
    },
    "/ocpi/receiver/2.2.1/tariffs/{countryCode}/{partyID}/{tariffID}": {
      "get": {
        "tags": [
          "tariffs-controller"
        ],
        "operationId": "getClientOwnedTariff",
        "summary": "Retrieve a Tariff as it is stored in the eMSP’s system.",
        "description": "Implemented by: eMSP, NSP\n\nIf the CPO wants to check the status of a Tariff in the eMSP’s system, it might `GET` the object from the eMSP’s system for validation purposes. After all, the CPO is the owner of the object, so it would be illogical if the eMSP’s system had a different status or was missing the object entirely.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tariffID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseTariff"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "put": {
        "tags": [
          "tariffs-controller"
        ],
        "operationId": "putClientOwnedTariff",
        "summary": "Push new/updated Tariff object to the eMSP",
        "description": "Implemented by: eMSP, NSP\n\nNew or updated Tariff objects are pushed from the CPO to the eMSP.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tariffID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tariff"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseUnit"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "tariffs-controller"
        ],
        "operationId": "deleteClientOwnedTariff",
        "summary": "Remove a Tariff object which is no longer in use and will not be used in the future either",
        "description": "Implemented by: eMSP, NSP\n\nDelete a Tariff object which is not used any more and will not be used in the future.\n\nNOTE: Before deleting a Tariff object, it is RECOMMENDED to ensure that the Tariff object is not referenced by any Connector object within the tariff_ids.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tariffID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseUnit"
                }
              }
            }
          }
        }
      }
    },
    "/ocpi/receiver/2.2.1/tokens/{countryCode}/{partyID}/{tokenUID}": {
      "get": {
        "tags": [
          "tokens-controller"
        ],
        "operationId": "getClientOwnedToken",
        "summary": "Retrieve a Token as it is stored in the CPO system",
        "description": "Implemented by: CPO\n\nIf the eMSP wants to check the status of a Token in the CPO system it might `GET` the object from the CPO system for validation purposes. The eMSP is the owner of the objects, so it would be illogical if the CPO system had a different status or was missing an object.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenUID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AD_HOC_USER",
                "APP_USER",
                "OTHER",
                "RFID"
              ],
              "default": "RFID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseToken"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tokens-controller"
        ],
        "operationId": "putClientOwnedToken",
        "summary": "Push new/updated Token object to the CPO",
        "description": "Implemented by: CPO\n\nNew or updated Token objects are pushed from the eMSP to the CPO.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenUID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AD_HOC_USER",
                "APP_USER",
                "OTHER",
                "RFID"
              ],
              "default": "RFID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Token"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseUnit"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "tokens-controller"
        ],
        "operationId": "patchClientOwnedToken",
        "summary": "Notify the CPO of partial updates to a Token",
        "description": "Implemented by: CPO\n\nSame as the `PUT` method, but only the fields/objects that have to be updated have to be present, other fields/objects that are not specified are considered unchanged.\n\nAny request to the `PATCH` method SHALL contain the last_updated field.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenUID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AD_HOC_USER",
                "APP_USER",
                "OTHER",
                "RFID"
              ],
              "default": "RFID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseUnit"
                }
              }
            }
          }
        }
      }
    },
    "/ocpi/sender/2.2.1/tokens": {
      "get": {
        "tags": [
          "tokens-controller"
        ],
        "operationId": "getTokensFromDataOwner",
        "summary": "Get the list of known Tokens, last updated between the {date_from} and {date_to}(paginated)",
        "description": "Implemented by: eMSP\n\nFetch information about Tokens known in the eMSP systems.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseTokenList"
                }
              }
            }
          }
        }
      }
    },
    "/ocpi/sender/2.2.1/tokens/{tokenUID}/authorize": {
      "post": {
        "tags": [
          "tokens-controller"
        ],
        "operationId": "postRealTimeTokenAuthorization",
        "summary": "Real-time authorization request",
        "description": "Implemented by: eMSP\n\nDo a 'real-time' authorization request to the eMSP system, validating if a Token might be used (at the optionally given Location).\n\nWhen the eMSP does not know the Token, the eMSP SHALL respond with an HTTP status code: 404 (Not Found).\n\nWhen the eMSP receives a 'real-time' authorization request from a CPO that contains too little information (no LocationReferences provided) to determine if the Token might be used, the eMSP SHALL respond with the OCPI status: 2002",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenUID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AD_HOC_USER",
                "APP_USER",
                "OTHER",
                "RFID"
              ],
              "default": "RFID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationReferences"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseAuthorizationInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/ocpi/receiver/2.2.1/commands/CANCEL_RESERVATION": {
      "post": {
        "tags": [
          "commands-controller"
        ],
        "operationId": "postCancelReservation",
        "summary": "Send a command to the CPO, requesting the CPO to send the command to the Charge Point",
        "description": "Implemented by: CPO\n\nCancelReservation object, for the CANCEL_RESERVATION command, with information needed to cancel an existing reservation.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelReservation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseCommandResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ocpi/receiver/2.2.1/commands/RESERVE_NOW": {
      "post": {
        "tags": [
          "commands-controller"
        ],
        "operationId": "postReserveNow",
        "summary": "Send a command to the CPO, requesting the CPO to send the command to the Charge Point",
        "description": "Implemented by: CPO\n\nReserveNow object, for the RESERVE_NOW command, with information needed to reserve a (specific) connector of a Charge Point for a given Token.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReserveNow"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseCommandResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ocpi/receiver/2.2.1/commands/START_SESSION": {
      "post": {
        "tags": [
          "commands-controller"
        ],
        "operationId": "postStartSession",
        "summary": "Send a command to the CPO, requesting the CPO to send the command to the Charge Point",
        "description": "Implemented by: CPO\n\nStartSession object, for the START_SESSION command, with information needed to start a sessions.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartSession"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseCommandResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ocpi/receiver/2.2.1/commands/STOP_SESSION": {
      "post": {
        "tags": [
          "commands-controller"
        ],
        "operationId": "postStopSession",
        "summary": "Send a command to the CPO, requesting the CPO to send the command to the Charge Point",
        "description": "Implemented by: CPO\n\nStopSession object, for the STOP_SESSION command, with information needed to stop a session.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopSession"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseCommandResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ocpi/receiver/2.2.1/commands/UNLOCK_CONNECTOR": {
      "post": {
        "tags": [
          "commands-controller"
        ],
        "operationId": "postUnlockConnector",
        "summary": "Send a command to the CPO, requesting the CPO to send the command to the Charge Point",
        "description": "Implemented by: CPO\n\nUnlockConnector object, for the UNLOCK_CONNECTOR command, with information needed to unlock a connector of a Charge Point.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnlockConnector"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseCommandResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ocpi/sender/2.2.1/commands/{command}/{uid}": {
      "post": {
        "tags": [
          "commands-controller"
        ],
        "operationId": "postAsyncResponse",
        "summary": "Receive the asynchronous response from the Charge Point",
        "description": "Implemented by: eMSP\n\nThe Sender interface receives the asynchronous responses.\n\nIt is up to the implementation of the eMSP to determine what parameters are put in the URL. The eMSP sends a URL in the `POST` method body to the CPO. The CPO is required to use this URL for the asynchronous response by the Charge Point. It is advised to make this URL unique for every request to differentiate simultaneous commands, for example by adding a unique id as a URL segment.",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "command",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "CANCEL_RESERVATION",
                "RESERVE_NOW",
                "START_SESSION",
                "STOP_SESSION",
                "UNLOCK_CONNECTOR"
              ]
            }
          },
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommandResult"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseUnit"
                }
              }
            }
          }
        }
      }
    },
    "/ocpi/2.2.1/receiver/chargingprofiles/{sessionId}": {
      "get": {
        "tags": [
          "charging-profiles-controller"
        ],
        "operationId": "getReceiverChargingProfile",
        "summary": "Gets the ActiveChargingProfile for a specific charging session",
        "description": "Implemented by: CPO\n\nRetrieves the ActiveChargingProfile as it is currently planned for the the given session.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "duration",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "response_url",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseChargingProfileResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "charging-profiles-controller"
        ],
        "operationId": "putReceiverChargingProfile",
        "summary": "Creates/updates a ChargingProfile for a specific charging sesison",
        "description": "Implemented by: CPO\n\nCreates a new ChargingProfile on a session, or replaces an existing ChargingProfile on the EVSE.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetChargingProfile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseChargingProfileResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "charging-profiles-controller"
        ],
        "operationId": "deleteReceiverChargingProfile",
        "summary": "Cancels an existing ChargingProfile for a specific charging session",
        "description": "Implemented by: CPO\n\nClears the ChargingProfile set by the eMSP on the given session.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response_url",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseChargingProfileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ocpi/2.2.1/sender/chargingprofiles/result/{uid}": {
      "post": {
        "tags": [
          "charging-profiles-controller"
        ],
        "operationId": "postChargingProfileResult",
        "summary": "Receive the asynchronous response from the Charge Point",
        "description": "Implemented by: SCSP\n\nAs the Sender interface is called by the Receiver (typically CPO) on the URL given response_url in the Sender request to the Receiver interface. It is up to the implementation of the Sender (typically SCSP) to determine what parameters are put in the URL. The Sender sends a URL in the `POST` method body to the Receiver. The Receiver is required to use this URL for the asynchronous response by the Charge Point. It is advised to make this URL unique for every request to differentiate simultaneous commands, for example by adding a unique id as a URL segment.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargingProfileResult"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseUnit"
                }
              }
            }
          }
        }
      }
    },
    "/ocpi/2.2.1/sender/chargingprofiles/{sessionId}": {
      "put": {
        "tags": [
          "charging-profiles-controller"
        ],
        "operationId": "putSenderChargingProfile",
        "summary": "Updates the Sender (typically SCSP) when the Receiver (typically CPO) knows the ActiveChargingProfile has changed.",
        "description": "Implemented by: SCSP\n\nThe Receiver SHALL call this interface every time it knows changes have been made that influence the ActiveChargingProfile for an ongoing session AND the Sender has at least once successfully called the charging profile Receiver `PUT` interface for this session (SetChargingProfile). If the Receiver doesn’t know the ActiveChargingProfile has changed (EVSE does not notify the Receiver (typically CPO) of the change) it is not required to call this interface.\n\nThe Receiver SHALL NOT call this interface for any session where the Sender has never, successfully called the charging profile Receiver `PUT` interface for this session (SetChargingProfile).\n\nThe Receiver SHALL send a useful relevant duration of ActiveChargingProfile to send to the Sender. As a guide: between 5 and 60 minutes. If the Sender wants a longer ActiveChargingProfile the Sender can always do a `GET` with a longer duration.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Request-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-from-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-country-code",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OCPI-to-party-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActiveChargingProfile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseUnit"
                }
              }
            }
          }
        }
      }
    },
    "/ocpi/2.2.1/receiver/clientinfo/{country_code}/{party_id}": {
      "get": {
        "tags": [
          "hub-client-info-controller"
        ],
        "operationId": "getClientInfo",
        "summary": "Retrieve a ClientInfo object as it is stored in the connected clients system",
        "description": "Implemented by: Parties connected to Hub (CPO/eMSP/NSP, etc.)\n\nIf the Hub wants to check the status of a ClientInfo object in the connected clients system it might `GET` the object from the connected clients system for validation purposes. The Hub is the owner of the objects, so it would be illogical if the connected client system had a different status or was missing an object.",
        "parameters": [
          {
            "name": "country_code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "party_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseClientInfo"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "hub-client-info-controller"
        ],
        "operationId": "putClientInfo",
        "summary": "Push new/updated ClientInfo object to connected clients",
        "description": "Implemented by: Parties connected to Hub (CPO/eMSP/NSP, etc.)\n\nNew or updated ClientInfo objects are pushed from the Hub to a connected client.",
        "parameters": [
          {
            "name": "country_code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "party_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseClientInfo"
                }
              }
            }
          }
        }
      }
    },
    "/ocpi/2.2.1/sender/clientinfo": {
      "get": {
        "tags": [
          "hub-client-info-controller"
        ],
        "operationId": "getAllClientInfoFromHub",
        "summary": "Get the list of known ClientInfo objects, last updated between the {date_from} and {date_to} paginated)",
        "description": "Implemented by: Hub\n\nFetch information about clients connected to a Hub.",
        "parameters": [
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OcpiResponseClientInfoList"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Version": {
        "required": [
          "url",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/VersionNumber"
          },
          "url": {
            "$ref": "#/components/schemas/URL"
          }
        }
      },
      "VersionDetail": {
        "required": [
          "endpoints",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Endpoint"
            }
          }
        },
        "x-examples": {
          "example-1": {
            "version": "string",
            "endpoints": [
              {
                "identifier": "string",
                "role": "SENDER",
                "url": "string"
              }
            ]
          }
        }
      },
      "Credentials": {
        "required": [
          "roles",
          "token",
          "url"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "maxLength": 64
          },
          "url": {
            "$ref": "#/components/schemas/URL"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CredentialsRole"
            }
          }
        }
      },
      "Location": {
        "required": [
          "address",
          "city",
          "coordinates",
          "country",
          "country_code",
          "id",
          "last_updated",
          "party_id",
          "publish"
        ],
        "type": "object",
        "properties": {
          "country_code": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 2
          },
          "party_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 3
          },
          "id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "publish": {
            "type": "boolean"
          },
          "publish_allowed_to": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublishTokenType"
            }
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "address": {
            "type": "string",
            "maxLength": 45
          },
          "city": {
            "type": "string",
            "maxLength": 45
          },
          "postal_code": {
            "type": "string",
            "maxLength": 10
          },
          "state": {
            "type": "string",
            "maxLength": 20
          },
          "country": {
            "type": "string",
            "maxLength": 3
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "related_locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdditionalGeoLocation"
            }
          },
          "parking_type": {
            "$ref": "#/components/schemas/ParkingType"
          },
          "evses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Evse"
            }
          },
          "directions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "operator": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "suboperator": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "owner": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "facilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Facility"
            }
          },
          "time_zone": {
            "type": "string",
            "maxLength": 255
          },
          "opening_times": {
            "$ref": "#/components/schemas/Hours"
          },
          "charging_when_closed": {
            "type": "boolean",
            "default": "true"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "energy_mix": {
            "$ref": "#/components/schemas/EnergyMix"
          },
          "last_updated": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "Session": {
        "required": [
          "auth_method",
          "cdr_token",
          "connector_id",
          "country_code",
          "currency",
          "evse_uid",
          "id",
          "kwh",
          "last_updated",
          "location_id",
          "party_id",
          "start_date_time",
          "status"
        ],
        "type": "object",
        "properties": {
          "country_code": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 2
          },
          "party_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 3
          },
          "id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "start_date_time": {
            "$ref": "#/components/schemas/DateTime"
          },
          "end_date_time": {
            "$ref": "#/components/schemas/DateTime"
          },
          "kwh": {
            "type": "number",
            "format": "float"
          },
          "cdr_token": {
            "$ref": "#/components/schemas/CdrToken"
          },
          "auth_method": {
            "$ref": "#/components/schemas/AuthMethod"
          },
          "authorization_reference": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "location_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "evse_uid": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "connector_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "meter_id": {
            "type": "string",
            "maxLength": 255
          },
          "currency": {
            "type": "string",
            "maxLength": 3
          },
          "charging_periods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChargingPeriod"
            }
          },
          "total_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "status": {
            "$ref": "#/components/schemas/SessionStatus"
          },
          "last_updated": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "ChargingPreferences": {
        "required": [
          "profile_type"
        ],
        "type": "object",
        "properties": {
          "profile_type": {
            "$ref": "#/components/schemas/ProfileType"
          },
          "departure_time": {
            "$ref": "#/components/schemas/DateTime"
          },
          "energy_need": {
            "type": "number",
            "format": "float"
          },
          "discharge_allowed": {
            "type": "boolean",
            "default": "false"
          }
        }
      },
      "CDR": {
        "required": [
          "auth_method",
          "cdr_location",
          "cdr_token",
          "charging_periods",
          "country_code",
          "currency",
          "end_date_time",
          "id",
          "last_updated",
          "party_id",
          "start_date_time",
          "total_cost",
          "total_energy",
          "total_time"
        ],
        "type": "object",
        "properties": {
          "country_code": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 2
          },
          "party_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 3
          },
          "id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 39
          },
          "start_date_time": {
            "$ref": "#/components/schemas/DateTime"
          },
          "end_date_time": {
            "$ref": "#/components/schemas/DateTime"
          },
          "session_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "cdr_token": {
            "$ref": "#/components/schemas/CdrToken"
          },
          "auth_method": {
            "$ref": "#/components/schemas/AuthMethod"
          },
          "authorization_reference": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "cdr_location": {
            "$ref": "#/components/schemas/CdrLocation"
          },
          "meter_id": {
            "type": "string",
            "maxLength": 255
          },
          "currency": {
            "type": "string",
            "maxLength": 3
          },
          "tariffs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tariff"
            }
          },
          "charging_periods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChargingPeriod"
            }
          },
          "signed_data": {
            "$ref": "#/components/schemas/SignedData"
          },
          "total_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_fixed_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_energy": {
            "type": "number",
            "format": "float"
          },
          "total_energy_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_time": {
            "type": "number",
            "format": "float"
          },
          "total_time_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_parking_time": {
            "type": "number",
            "format": "float"
          },
          "total_parking_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "total_reservation_cost": {
            "$ref": "#/components/schemas/Price"
          },
          "remark": {
            "type": "string",
            "maxLength": 255
          },
          "invoice_reference_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 39
          },
          "credit": {
            "type": "boolean"
          },
          "credit_reference_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 39
          },
          "home_charging_compensation": {
            "type": "boolean"
          },
          "last_updated": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "Tariff": {
        "required": [
          "country_code",
          "currency",
          "elements",
          "id",
          "last_updated",
          "party_id"
        ],
        "type": "object",
        "properties": {
          "country_code": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 2
          },
          "party_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 3
          },
          "id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "currency": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/TariffType"
          },
          "tariff_alt_text": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "tariff_alt_url": {
            "$ref": "#/components/schemas/URL"
          },
          "min_price": {
            "$ref": "#/components/schemas/Price"
          },
          "max_price": {
            "$ref": "#/components/schemas/Price"
          },
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TariffElement"
            }
          },
          "start_date_time": {
            "$ref": "#/components/schemas/DateTime"
          },
          "end_date_time": {
            "$ref": "#/components/schemas/DateTime"
          },
          "energy_mix": {
            "$ref": "#/components/schemas/EnergyMix"
          },
          "last_updated": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "AuthorizationInfo": {
        "required": [
          "allowed",
          "token"
        ],
        "type": "object",
        "properties": {
          "allowed": {
            "$ref": "#/components/schemas/AllowedType"
          },
          "token": {
            "$ref": "#/components/schemas/Token"
          },
          "location": {
            "$ref": "#/components/schemas/LocationReferences"
          },
          "authorization_reference": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "info": {
            "$ref": "#/components/schemas/DisplayText"
          }
        }
      },
      "Token": {
        "required": [
          "contract_id",
          "country_code",
          "issuer",
          "last_updated",
          "party_id",
          "type",
          "uid",
          "valid",
          "whitelist"
        ],
        "type": "object",
        "properties": {
          "country_code": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 2
          },
          "party_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 3
          },
          "uid": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "type": {
            "$ref": "#/components/schemas/TokenType"
          },
          "contract_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "visual_number": {
            "type": "string",
            "maxLength": 64
          },
          "issuer": {
            "type": "string",
            "maxLength": 64
          },
          "group_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "valid": {
            "type": "boolean"
          },
          "whitelist": {
            "$ref": "#/components/schemas/WhitelistType"
          },
          "language": {
            "type": "string",
            "maxLength": 2
          },
          "default_profile_type": {
            "$ref": "#/components/schemas/ProfileType"
          },
          "energy_contract": {
            "$ref": "#/components/schemas/EnergyContract"
          },
          "last_updated": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "CancelReservation": {
        "required": [
          "reservation_id",
          "response_url"
        ],
        "type": "object",
        "properties": {
          "response_url": {
            "$ref": "#/components/schemas/URL"
          },
          "reservation_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          }
        }
      },
      "CommandResponse": {
        "required": [
          "result",
          "timeout"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/CommandResponseType"
          },
          "timeout": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "$ref": "#/components/schemas/DisplayText"
          }
        }
      },
      "CommandResult": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/CommandResultType"
          },
          "message": {
            "$ref": "#/components/schemas/DisplayText"
          }
        }
      },
      "ReserveNow": {
        "required": [
          "expiry_date",
          "location_id",
          "reservation_id",
          "response_url",
          "token"
        ],
        "type": "object",
        "properties": {
          "response_url": {
            "$ref": "#/components/schemas/URL"
          },
          "token": {
            "$ref": "#/components/schemas/Token"
          },
          "expiry_date": {
            "$ref": "#/components/schemas/DateTime"
          },
          "reservation_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "location_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "evse_uid": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "authorization_reference": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          }
        }
      },
      "StartSession": {
        "required": [
          "location_id",
          "response_url",
          "token"
        ],
        "type": "object",
        "properties": {
          "response_url": {
            "$ref": "#/components/schemas/URL"
          },
          "token": {
            "$ref": "#/components/schemas/Token"
          },
          "location_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "evse_uid": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "connector_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "authorization_reference": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          }
        }
      },
      "StopSession": {
        "required": [
          "response_url",
          "session_id"
        ],
        "type": "object",
        "properties": {
          "response_url": {
            "$ref": "#/components/schemas/DateTime"
          },
          "session_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          }
        }
      },
      "UnlockConnector": {
        "required": [
          "connector_id",
          "evse_uid",
          "location_id",
          "response_url"
        ],
        "type": "object",
        "properties": {
          "response_url": {
            "$ref": "#/components/schemas/URL"
          },
          "location_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "evse_uid": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "connector_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          }
        }
      },
      "ChargingProfileResponse": {
        "required": [
          "result",
          "timeout"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ChargingProfileResponseType"
          },
          "timeout": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ActiveChargingProfileResult": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ChargingProfileResultType"
          },
          "profile": {
            "$ref": "#/components/schemas/ActiveChargingProfile"
          }
        }
      },
      "ChargingProfileResult": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ChargingProfileResultType"
          },
          "profile": {
            "$ref": "#/components/schemas/ActiveChargingProfile"
          }
        }
      },
      "ClearProfileResult": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ChargingProfileResultType"
          }
        }
      },
      "SetChargingProfile": {
        "required": [
          "charging_profile",
          "response_url"
        ],
        "type": "object",
        "properties": {
          "charging_profile": {
            "$ref": "#/components/schemas/ChargingProfile"
          },
          "response_url": {
            "$ref": "#/components/schemas/URL"
          }
        }
      },
      "ClientInfo": {
        "required": [
          "party_id",
          "country_code",
          "role",
          "status",
          "last_updated"
        ],
        "type": "object",
        "properties": {
          "party_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 3
          },
          "country_code": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 2
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "status": {
            "$ref": "#/components/schemas/ConnectionStatus"
          },
          "last_updated": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "Endpoint": {
        "required": [
          "identifier",
          "role",
          "url"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "$ref": "#/components/schemas/ModuleID"
          },
          "role": {
            "$ref": "#/components/schemas/InterfaceRole"
          },
          "url": {
            "$ref": "#/components/schemas/URL"
          }
        }
      },
      "Connector": {
        "required": [
          "format",
          "id",
          "last_updated",
          "max_amperage",
          "max_voltage",
          "power_type",
          "standard"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "standard": {
            "$ref": "#/components/schemas/ConnectorType"
          },
          "format": {
            "$ref": "#/components/schemas/ConnectorFormat"
          },
          "power_type": {
            "$ref": "#/components/schemas/PowerType"
          },
          "max_voltage": {
            "type": "integer",
            "format": "int32"
          },
          "max_amperage": {
            "type": "integer",
            "format": "int32"
          },
          "max_electric_power": {
            "type": "integer",
            "format": "int32"
          },
          "tariff_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "caseInsensitive": true,
              "maxLength": 36
            }
          },
          "terms_and_conditions": {
            "$ref": "#/components/schemas/URL"
          },
          "last_updated": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "Evse": {
        "required": [
          "connectors",
          "last_updated",
          "status",
          "uid"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "evse_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 48
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "status_schedule": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusSchedule"
            }
          },
          "capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Capability"
            }
          },
          "connectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connector"
            }
          },
          "floor_level": {
            "type": "string",
            "maxLength": 4
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "physical_reference": {
            "type": "string",
            "maxLength": 16
          },
          "directions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisplayText"
            }
          },
          "parking_restrictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParkingRestriction"
            }
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "last_updated": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "CdrDimension": {
        "required": [
          "type",
          "volume"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CdrDimensionType"
          },
          "volume": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "CredentialsRole": {
        "required": [
          "business_details",
          "country_code",
          "party_id",
          "role"
        ],
        "type": "object",
        "properties": {
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "business_details": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "party_id": {
            "type": "string",
            "maxLength": 3,
            "caseInsensitive": true
          },
          "country_code": {
            "type": "string",
            "maxLength": 2,
            "caseInsensitive": true
          }
        }
      },
      "CdrLocation": {
        "required": [
          "address",
          "city",
          "connector_format",
          "connector_id",
          "connector_power_type",
          "connector_standard",
          "coordinates",
          "country",
          "evse_id",
          "evse_uid",
          "id",
          "postal_code"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "address": {
            "type": "string",
            "maxLength": 45
          },
          "city": {
            "type": "string",
            "maxLength": 45
          },
          "postal_code": {
            "type": "string",
            "maxLength": 10
          },
          "state": {
            "type": "string",
            "maxLength": 20
          },
          "country": {
            "type": "string",
            "maxLength": 3
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoLocation"
          },
          "evse_uid": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "evse_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 48
          },
          "connector_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "connector_standard": {
            "$ref": "#/components/schemas/ConnectorType"
          },
          "connector_format": {
            "$ref": "#/components/schemas/ConnectorFormat"
          },
          "connector_power_type": {
            "$ref": "#/components/schemas/PowerType"
          }
        }
      },
      "CdrToken": {
        "required": [
          "country_code",
          "party_id",
          "contract_id",
          "type",
          "uid"
        ],
        "type": "object",
        "properties": {
          "country_code": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 2
          },
          "party_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 3
          },
          "uid": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "type": {
            "$ref": "#/components/schemas/TokenType"
          },
          "contract_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          }
        }
      },
      "ChargingPeriod": {
        "required": [
          "dimensions",
          "start_date_time"
        ],
        "type": "object",
        "properties": {
          "start_date_time": {
            "$ref": "#/components/schemas/DateTime"
          },
          "dimensions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CdrDimension"
            }
          },
          "tariff_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          }
        }
      },
      "DisplayText": {
        "required": [
          "language",
          "text"
        ],
        "type": "object",
        "properties": {
          "language": {
            "type": "string",
            "maxLength": 2
          },
          "text": {
            "type": "string",
            "maxLength": 512
          }
        }
      },
      "EnergyMix": {
        "required": [
          "is_green_energy"
        ],
        "type": "object",
        "properties": {
          "is_green_energy": {
            "type": "boolean"
          },
          "energy_sources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnergySource"
            }
          },
          "environ_impact": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentalImpact"
            }
          },
          "supplier_name": {
            "type": "string",
            "maxLength": 64
          },
          "energy_product_name": {
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "EnergySource": {
        "required": [
          "percentage",
          "source"
        ],
        "type": "object",
        "properties": {
          "source": {
            "$ref": "#/components/schemas/EnergySourceCategory"
          },
          "percentage": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "EnvironmentalImpact": {
        "required": [
          "amount",
          "category"
        ],
        "type": "object",
        "properties": {
          "category": {
            "$ref": "#/components/schemas/EnvironmentalImpactCategory"
          },
          "amount": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "GeoLocation": {
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "latitude": {
            "type": "string",
            "maxLength": 10
          },
          "longitude": {
            "type": "string",
            "maxLength": 11
          }
        }
      },
      "Price": {
        "required": [
          "excl_vat"
        ],
        "type": "object",
        "properties": {
          "excl_vat": {
            "type": "number",
            "format": "float"
          },
          "incl_vat": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "PriceComponent": {
        "required": [
          "price",
          "step_size",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/TariffDimensionType"
          },
          "price": {
            "type": "number",
            "format": "float"
          },
          "vat": {
            "type": "number",
            "format": "float"
          },
          "step_size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SignedData": {
        "required": [
          "encoding_method",
          "signed_values"
        ],
        "type": "object",
        "properties": {
          "encoding_method": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "encoding_method_version": {
            "type": "integer",
            "format": "int32"
          },
          "public_key": {
            "type": "string",
            "maxLength": 512
          },
          "signed_values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SignedValue"
            }
          },
          "url": {
            "type": "string",
            "maxLength": 512
          }
        }
      },
      "SignedValue": {
        "required": [
          "nature",
          "plain_data",
          "signed_data"
        ],
        "type": "object",
        "properties": {
          "nature": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 32
          },
          "plain_data": {
            "type": "string",
            "maxLength": 512
          },
          "signed_data": {
            "type": "string",
            "maxLength": 5000
          }
        }
      },
      "TariffElement": {
        "required": [
          "price_components"
        ],
        "type": "object",
        "properties": {
          "price_components": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceComponent"
            }
          },
          "restrictions": {
            "$ref": "#/components/schemas/TariffRestrictions"
          }
        }
      },
      "TariffRestrictions": {
        "type": "object",
        "properties": {
          "start_time": {
            "type": "string",
            "maxLength": 5
          },
          "end_time": {
            "type": "string",
            "maxLength": 5
          },
          "start_date": {
            "type": "string",
            "maxLength": 10
          },
          "end_date": {
            "type": "string",
            "maxLength": 10
          },
          "min_kwh": {
            "type": "number",
            "format": "float"
          },
          "max_kwh": {
            "type": "number",
            "format": "float"
          },
          "min_current": {
            "type": "number",
            "format": "float"
          },
          "max_current": {
            "type": "number",
            "format": "float"
          },
          "min_power": {
            "type": "number",
            "format": "float"
          },
          "max_power": {
            "type": "number",
            "format": "float"
          },
          "min_duration": {
            "type": "integer",
            "format": "int32"
          },
          "max_duration": {
            "type": "integer",
            "format": "int32"
          },
          "day_of_week": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DayOfWeek"
            }
          },
          "reservation": {
            "$ref": "#/components/schemas/ReservationRestrictionType"
          }
        }
      },
      "OcpiResponseUnit": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Unit"
          },
          "timestamp": {
            "$ref": "#/components/schemas/DateTime"
          }
        },
        "required": [
          "status_code",
          "timestamp"
        ]
      },
      "Unit": {
        "type": "object",
        "x-examples": {
          "example-1": {}
        }
      },
      "ChargingProfile": {
        "required": [
          "charging_rate_unit"
        ],
        "type": "object",
        "properties": {
          "start_date_time": {
            "$ref": "#/components/schemas/DateTime"
          },
          "duration": {
            "type": "integer",
            "format": "int32"
          },
          "charging_rate_unit": {
            "$ref": "#/components/schemas/ChargingRateUnit"
          },
          "min_charging_rate": {
            "type": "number",
            "format": "float"
          },
          "charging_profile_period": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChargingProfilePeriod"
            }
          }
        }
      },
      "ActiveChargingProfile": {
        "required": [
          "charging_profile",
          "start_date_time"
        ],
        "type": "object",
        "properties": {
          "start_date_time": {
            "$ref": "#/components/schemas/DateTime"
          },
          "charging_profile": {
            "$ref": "#/components/schemas/ChargingProfile"
          }
        }
      },
      "ChargingProfilePeriod": {
        "required": [
          "limit",
          "start_period"
        ],
        "type": "object",
        "properties": {
          "start_period": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "EnergyContract": {
        "required": [
          "supplier_name"
        ],
        "type": "object",
        "properties": {
          "supplier_name": {
            "type": "string",
            "maxLength": 64
          },
          "contract_id": {
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "BusinessDetails": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "website": {
            "$ref": "#/components/schemas/URL"
          },
          "logo": {
            "$ref": "#/components/schemas/Image"
          }
        }
      },
      "Image": {
        "required": [
          "category",
          "type",
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "$ref": "#/components/schemas/URL"
          },
          "thumbnail": {
            "$ref": "#/components/schemas/URL"
          },
          "category": {
            "$ref": "#/components/schemas/ImageCategory"
          },
          "type": {
            "type": "string",
            "caseInsensitive": true
          },
          "width": {
            "type": "integer",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AdditionalGeoLocation": {
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "latitude": {
            "type": "string",
            "maxLength": 10
          },
          "longitude": {
            "type": "string",
            "maxLength": 11
          },
          "name": {
            "$ref": "#/components/schemas/DisplayText"
          }
        }
      },
      "ExceptionalPeriod": {
        "required": [
          "period_begin",
          "period_end"
        ],
        "type": "object",
        "properties": {
          "period_begin": {
            "$ref": "#/components/schemas/DateTime"
          },
          "period_end": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "Hours": {
        "required": [
          "twentyfourseven"
        ],
        "type": "object",
        "properties": {
          "twentyfourseven": {
            "type": "boolean"
          },
          "regular_hours": {
            "$ref": "#/components/schemas/RegularHours"
          },
          "exceptional_openings": {
            "$ref": "#/components/schemas/ExceptionalPeriod"
          },
          "exceptional_closings": {
            "$ref": "#/components/schemas/ExceptionalPeriod"
          }
        }
      },
      "PublishTokenType": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "type": {
            "$ref": "#/components/schemas/TokenType"
          },
          "visual_number": {
            "type": "string",
            "maxLength": 64
          },
          "issuer": {
            "type": "string",
            "maxLength": 64
          },
          "group_id ": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          }
        }
      },
      "RegularHours": {
        "required": [
          "period_begin",
          "period_end",
          "weekday"
        ],
        "type": "object",
        "properties": {
          "weekday": {
            "type": "integer",
            "format": "int32",
            "range": "1 - 7"
          },
          "period_begin": {
            "type": "string",
            "maxLength": 5
          },
          "period_end": {
            "type": "string",
            "maxLength": 5
          }
        }
      },
      "StatusSchedule": {
        "required": [
          "period_begin",
          "status"
        ],
        "type": "object",
        "properties": {
          "period_begin": {
            "$ref": "#/components/schemas/DateTime"
          },
          "period_end": {
            "$ref": "#/components/schemas/DateTime"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          }
        }
      },
      "OcpiResponseTariffList": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tariff"
            }
          },
          "timestamp": {
            "$ref": "#/components/schemas/DateTime"
          }
        },
        "required": [
          "status_code",
          "timestamp"
        ]
      },
      "LocationReferences": {
        "required": [
          "location_id"
        ],
        "type": "object",
        "properties": {
          "location_id": {
            "type": "string",
            "caseInsensitive": true,
            "maxLength": 36
          },
          "evse_uids": {
            "type": "array",
            "items": {
              "type": "string",
              "caseInsensitive": true,
              "maxLength": 36
            }
          }
        }
      },
      "URL": {
        "type": "string",
        "maxLength": 255
      },
      "VersionNumber": {
        "type": "string",
        "enum": [
          "2.0",
          "2.1",
          "2.1.1",
          "2.2",
          "2.2.1"
        ]
      },
      "ModuleID": {
        "type": "string",
        "enum": [
          "cdrs",
          "chargingprofiles",
          "commands",
          "credentials",
          "hubclientinfo",
          "locations",
          "sessions",
          "tariffs",
          "tokens"
        ]
      },
      "InterfaceRole": {
        "type": "string",
        "enum": [
          "SENDER",
          "RECEIVER"
        ]
      },
      "Role": {
        "type": "string",
        "enum": [
          "CPO",
          "EMSP",
          "HUB",
          "NAP",
          "NSP",
          "OTHER",
          "SCSP"
        ]
      },
      "ImageCategory": {
        "type": "string",
        "enum": [
          "CHARGER",
          "ENTRANCE",
          "LOCATION",
          "NETWORK",
          "OPERATOR",
          "OTHER",
          "OWNER"
        ]
      },
      "TokenType": {
        "type": "string",
        "enum": [
          "AD_HOC_USER",
          "APP_USER",
          "OTHER",
          "RFID"
        ]
      },
      "ParkingType": {
        "type": "string",
        "enum": [
          "ALONG_MOTORWAY",
          "PARKING_GARAGE",
          "PARKING_LOT",
          "ON_DRIVEWAY",
          "ON_STREET",
          "UNDERGROUND_GARAGE"
        ]
      },
      "Status": {
        "type": "string",
        "enum": [
          "AVAILABLE",
          "BLOCKED",
          "CHARGING",
          "INOPERATIVE",
          "OUTOFORDER",
          "PLANNED",
          "REMOVED",
          "RESERVED",
          "UNKNOWN"
        ]
      },
      "DateTime": {
        "type": "string",
        "maxLength": 25,
        "standard": "RFC 3339"
      },
      "Capability": {
        "type": "string",
        "enum": [
          "CHARGING_PROFILE_CAPABLE",
          "CHARGING_PREFERENCES_CAPABLE",
          "CHIP_CARD_SUPPORT",
          "CONTACTLESS_CARD_SUPPORT",
          "CREDIT_CARD_PAYABLE",
          "DEBIT_CARD_PAYABLE",
          "PED_TERMINAL",
          "REMOTE_START_STOP_CAPABLE",
          "RESERVABLE",
          "RFID_READER",
          "START_SESSION_CONNECTOR_REQUIRED",
          "TOKEN_GROUP_CAPABLE",
          "UNLOCK_CAPABLE"
        ]
      },
      "ConnectorType": {
        "type": "string",
        "enum": [
          "CHADEMO",
          "CHAOJI",
          "DOMESTIC_A",
          "DOMESTIC_B",
          "DOMESTIC_C",
          "DOMESTIC_D",
          "DOMESTIC_E",
          "DOMESTIC_F",
          "DOMESTIC_G",
          "DOMESTIC_H",
          "DOMESTIC_I",
          "DOMESTIC_J",
          "DOMESTIC_K",
          "DOMESTIC_L",
          "DOMESTIC_M",
          "DOMESTIC_N",
          "DOMESTIC_O",
          "GBT_AC",
          "GBT_DC",
          "IEC_60309_2_single_16",
          "IEC_60309_2_three_16",
          "IEC_60309_2_three_32",
          "IEC_60309_2_three_64",
          "IEC_62196_T1",
          "IEC_62196_T1_COMBO",
          "IEC_62196_T2",
          "IEC_62196_T2_COMBO",
          "IEC_62196_T3A",
          "IEC_62196_T3C",
          "NEMA_5_20",
          "NEMA_6_30",
          "NEMA_6_50",
          "NEMA_10_30",
          "NEMA_10_50",
          "NEMA_14_30",
          "NEMA_14_50",
          "PANTOGRAPH_BOTTOM_UP",
          "PANTOGRAPH_TOP_DOWN",
          "TESLA_R",
          "TESLA_S"
        ]
      },
      "ConnectorFormat": {
        "type": "string",
        "enum": [
          "SOCKET",
          "CABLE"
        ]
      },
      "PowerType": {
        "type": "string",
        "enum": [
          "AC_1_PHASE",
          "AC_2_PHASE",
          "AC_2_PHASE_SPLIT",
          "AC_3_PHASE",
          "DC"
        ]
      },
      "ParkingRestriction": {
        "type": "string",
        "enum": [
          "EV_ONLY",
          "PLUGGED",
          "DISABLED",
          "CUSTOMERS",
          "MOTORCYCLES"
        ]
      },
      "Facility": {
        "type": "string",
        "enum": [
          "HOTEL",
          "RESTAURANT",
          "CAFE",
          "MALL",
          "SUPERMARKET",
          "SPORT",
          "RECREATION_AREA",
          "NATURE",
          "MUSEUM",
          "BIKE_SHARING",
          "BUS_STOP",
          "TAXI_STAND",
          "TRAM_STOP",
          "METRO_STATION",
          "TRAIN_STATION",
          "AIRPORT",
          "PARKING_LOT",
          "CARPOOL_PARKING",
          "FUEL_STATION",
          "WIFI"
        ]
      },
      "EnergySourceCategory": {
        "type": "string",
        "enum": [
          "NUCLEAR",
          "GENERAL_FOSSIL",
          "COAL",
          "GAS",
          "GENERAL_GREEN",
          "SOLAR",
          "WIND",
          "WATER"
        ]
      },
      "EnvironmentalImpactCategory": {
        "type": "string",
        "enum": [
          "NUCLEAR_WASTE",
          "CARBON_DIOXIDE"
        ]
      },
      "ChargingPreferencesResponse": {
        "type": "string",
        "enum": [
          "ACCEPTED",
          "DEPARTURE_REQUIRED",
          "ENERGY_NEED_REQUIRED",
          "NOT_POSSIBLE",
          "PROFILE_TYPE_NOT_SUPPORTED"
        ]
      },
      "ProfileType": {
        "type": "string",
        "enum": [
          "CHEAP",
          "FAST",
          "GREEN",
          "REGULAR"
        ]
      },
      "SessionStatus": {
        "type": "string",
        "enum": [
          "ACTIVE",
          "COMPLETED",
          "INVALID",
          "PENDING",
          "RESERVATION"
        ]
      },
      "AuthMethod": {
        "type": "string",
        "enum": [
          "AUTH_REQUEST",
          "COMMAND",
          "WHITELIST"
        ]
      },
      "CdrDimensionType": {
        "type": "string",
        "enum": [
          "CURRENT",
          "ENERGY",
          "ENERGY_EXPORT",
          "ENERGY_IMPORT",
          "MAX_CURRENT",
          "MIN_CURRENT",
          "MAX_POWER",
          "MIN_POWER",
          "PARKING_TIME",
          "POWER",
          "RESERVATION_TIME",
          "STATE_OF_CHARGE",
          "TIME"
        ]
      },
      "DayOfWeek": {
        "type": "string",
        "enum": [
          "MONDAY",
          "TUESDAY",
          "WEDNESDAY",
          "THURSDAY",
          "FRIDAY",
          "SATURDAY",
          "SUNDAY"
        ]
      },
      "ReservationRestrictionType": {
        "type": "string",
        "enum": [
          "RESERVATION",
          "RESERVATION_EXPIRES"
        ]
      },
      "TariffDimensionType": {
        "type": "string",
        "enum": [
          "ENERGY",
          "FLAT",
          "PARKING_TIME",
          "TIME"
        ]
      },
      "TariffType": {
        "type": "string",
        "enum": [
          "AD_HOC_PAYMENT",
          "PROFILE_CHEAP",
          "PROFILE_FAST",
          "PROFILE_GREEN",
          "REGULAR"
        ]
      },
      "AllowedType": {
        "type": "string",
        "enum": [
          "ALLOWED",
          "BLOCKED",
          "EXPIRED",
          "NO_CREDIT",
          "NOT_ALLOWED"
        ]
      },
      "WhitelistType": {
        "type": "string",
        "enum": [
          "ALWAYS",
          "ALLOWED",
          "ALLOWED_OFFLINE",
          "NEVER"
        ]
      },
      "CommandResponseType": {
        "type": "string",
        "enum": [
          "NOT_SUPPORTED",
          "REJECTED",
          "ACCEPTED",
          "UNKNOWN_SESSION"
        ]
      },
      "CommandResultType": {
        "type": "string",
        "enum": [
          "ACCEPTED",
          "CANCELED_RESERVATION",
          "EVSE_OCCUPIED",
          "EVSE_INOPERATIVE",
          "FAILED",
          "NOT_SUPPORTED",
          "REJECTED",
          "TIMEOUT",
          "UNKNOWN_RESERVATION"
        ]
      },
      "CommandType": {
        "type": "string",
        "enum": [
          "CANCEL_RESERVATION",
          "RESERVE_NOW",
          "START_SESSION",
          "STOP_SESSION",
          "UNLOCK_CONNECTOR"
        ]
      },
      "ChargingRateUnit": {
        "type": "string",
        "enum": [
          "W",
          "A"
        ]
      },
      "ChargingProfileResponseType": {
        "type": "string",
        "enum": [
          "ACCEPTED",
          "NOT_SUPPORTED",
          "REJECTED",
          "TOO_OFTEN",
          "UNKNOWN_SESSION"
        ]
      },
      "ChargingProfileResultType": {
        "type": "string",
        "enum": [
          "ACCEPTED",
          "REJECTED",
          "UNKNOWN"
        ]
      },
      "ConnectionStatus": {
        "type": "string",
        "enum": [
          "CONNECTED",
          "OFFLINE",
          "PLANNED",
          "SUSPENDED"
        ]
      },
      "OcpiResponse": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          },
          "data": {
            "type": "object"
          },
          "timestamp": {
            "$ref": "#/components/schemas/DateTime"
          }
        },
        "required": [
          "status_code",
          "timestamp"
        ]
      },
      "OcpiResponseObject": {
        "required": [
          "status_code",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "object"
          },
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          },
          "timestamp": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "OcpiResponseListVersion": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Version"
            }
          },
          "timestamp": {
            "$ref": "#/components/schemas/DateTime"
          }
        },
        "required": [
          "status_code",
          "timestamp"
        ]
      },
      "OcpiResponseVersionDetail": {
        "required": [
          "status_code",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/VersionDetail"
          },
          "timestamp": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "OcpiResponseCredentials": {
        "required": [
          "status_code",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Credentials"
          },
          "timestamp": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "OcpiResponseLocation": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Location"
          },
          "timestamp": {
            "$ref": "#/components/schemas/DateTime"
          }
        },
        "required": [
          "status_code",
          "timestamp"
        ]
      },
      "OcpiResponseEvse": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Evse"
          },
          "timestamp": {
            "$ref": "#/components/schemas/DateTime"
          }
        },
        "required": [
          "status_code",
          "timestamp"
        ]
      },
      "OcpiResponseConnector": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Connector"
          },
          "timestamp": {
            "$ref": "#/components/schemas/DateTime"
          }
        },
        "required": [
          "status_code",
          "timestamp"
        ]
      },
      "OcpiResponseLocationList": {
        "required": [
          "status_code",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Location"
            }
          },
          "timestamp": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "OcpiResponseChargingPreferencesResponse": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/ChargingPreferencesResponse"
          },
          "timestamp": {
            "$ref": "#/components/schemas/DateTime"
          }
        },
        "required": [
          "status_code",
          "timestamp"
        ]
      },
      "OcpiResponseSession": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Session"
          },
          "timestamp": {
            "$ref": "#/components/schemas/DateTime"
          }
        },
        "required": [
          "status_code",
          "timestamp"
        ]
      },
      "OcpiResponseSessionList": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Session"
            }
          },
          "timestamp": {
            "$ref": "#/components/schemas/DateTime"
          }
        },
        "required": [
          "status_code",
          "timestamp"
        ]
      },
      "OcpiResponseCDR": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/CDR"
          },
          "timestamp": {
            "$ref": "#/components/schemas/DateTime"
          }
        },
        "required": [
          "status_code",
          "timestamp"
        ]
      },
      "OcpiResponseCDRList": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CDR"
            }
          },
          "timestamp": {
            "$ref": "#/components/schemas/DateTime"
          }
        },
        "required": [
          "status_code",
          "timestamp"
        ]
      },
      "OcpiResponseAuthorizationInfo": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/AuthorizationInfo"
          },
          "timestamp": {
            "$ref": "#/components/schemas/DateTime"
          }
        },
        "required": [
          "status_code",
          "timestamp"
        ]
      },
      "OcpiResponseToken": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Token"
          },
          "timestamp": {
            "$ref": "#/components/schemas/DateTime"
          }
        },
        "required": [
          "status_code",
          "timestamp"
        ]
      },
      "OcpiResponseTariff": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Tariff"
          },
          "timestamp": {
            "$ref": "#/components/schemas/DateTime"
          }
        },
        "required": [
          "status_code",
          "timestamp"
        ]
      },
      "OcpiResponseTokenList": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Token"
            }
          },
          "timestamp": {
            "$ref": "#/components/schemas/DateTime"
          }
        },
        "required": [
          "status_code",
          "timestamp"
        ]
      },
      "OcpiResponseCommandResponse": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/CommandResponse"
          },
          "timestamp": {
            "$ref": "#/components/schemas/DateTime"
          }
        },
        "required": [
          "status_code",
          "timestamp"
        ]
      },
      "OcpiResponseChargingProfileResponse": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/ChargingProfileResponse"
          },
          "timestamp": {
            "$ref": "#/components/schemas/DateTime"
          }
        },
        "required": [
          "status_code",
          "timestamp"
        ]
      },
      "OcpiResponseClientInfo": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/ClientInfo"
          },
          "timestamp": {
            "$ref": "#/components/schemas/DateTime"
          }
        },
        "required": [
          "status_code",
          "timestamp"
        ]
      },
      "OcpiResponseClientInfoList": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "format": "int32"
          },
          "status_message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientInfo"
            }
          },
          "timestamp": {
            "$ref": "#/components/schemas/DateTime"
          }
        },
        "required": [
          "status_code",
          "timestamp"
        ]
      },
      "BasicRole": {
        "required": [
          "country_code",
          "party_id"
        ],
        "type": "object",
        "properties": {
          "party_id": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          }
        },
        "x-examples": {
          "example-1": {
            "party_id": "string",
            "country_code": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "token": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "Add the complete 'Token (token)' message into the token field"
      }
    }
  },
  "security": [
    {
      "token": []
    }
  ]
}